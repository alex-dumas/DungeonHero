{"ts":1373484480258,"silentsave":true,"restoring":false,"patch":[[]],"length":0}
{"contributors":[],"silentsave":true,"ts":1373484685982,"patch":[[{"diffs":[[1,"ig.module(\n    'plugins.screen-fader'\n)\n.requires(\n    'impact.timer',\n    'impact.animation'\n)\n.defines(function() {\n     \n    ig.ScreenFader = ig.Class.extend({\n         \n        defaultOptions: {\n            color: { r: 0, g: 0, b: 0, a: 1 },\n            fade: 'in',\n            speed: 1,\n            screenWidth: 0,\n            screenHeight: 0,\n            waitUntilLoaded: true,\n            visible: true\n        },\n             \n        init: function(options) {\n             \n            this._setOptions(options);\n             \n            var isFadingIn = this.options.fade != 'out';\n             \n            this._alpha = isFadingIn ? 0 : 1; // set the initial alpha value\n            this._alphaChange = isFadingIn ? 1 : -1;  // set the direction in which alpha changes each frame\n             \n            // check if an image is defined. It will be \"tiled\" across the screen\n            if (this.options.tileImagePath) {\n              \n                if (isNaN(this.options.tileWidth)) {\n                    throw new Error(\"ScreenFader option for tileWidth is invalid\");\n                } else if (isNaN(this.options.tileHeight)) {\n                    throw new Error(\"ScreenFader option for tileHeight is invalid\");\n                }\n                 \n                // Create a 1 cell animation of the tile image, using width and height\n                this._sheet = new ig.AnimationSheet(this.options.tileImagePath, this.options.tileWidth, this.options.tileHeight);\n                this._anim = new ig.Animation(this._sheet, 1.0, [0]); // Use a 1 cell animation\n                this._anim.alpha = this._alpha; // set the initial alpha of the animation\n \n            }\n             \n            if (!isNaN(this.options.delayBefore)) {\n                var delayTime = this.options.delayBefore <= 0 ? 0 : this.options.delayBefore;\n                if (delayTime > 0) {\n                    this.timerDelayBefore = new ig.Timer(delayTime);\n                }\n            }\n             \n        },\n         \n        draw: function() {\n             \n            if (this.timerDelayAfter && this.timerDelayAfter.delta() > 0) {\n                delete this.timerDelayAfter;\n                this._callUserCallback();\n            }\n             \n            if (this.timerDelayBefore) {\n                if (this.timerDelayBefore.delta() < 0) {\n                    return;\n                } else {\n                    delete this.timerDelayBefore;\n                }\n            }\n             \n            if (!this.options.visible) {\n                return;\n            }\n             \n            if (!this.isFinished && (!this._sheet || (this._sheet.image.loaded || !this.options.waitUntilLoaded))) {\n                this._fadeAlphaValue();\n            }\n             \n            if (this._alpha <= 0) {\n                return;\n            }\n             \n            if (this._anim) {\n                this.drawImageTiledOnScreen();\n            } else {\n                this.drawColorOnScreen();\n            }\n \n        },\n         \n        drawImageTiledOnScreen: function() {\n         \n            var tileX = 0, tileY = 0, totalWidth = this.options.screenWidth, totalHeight = this.options.screenHeight;\n            var tileWidth = this.options.tileWidth, tileHeight = this.options.tileHeight;\n             \n            while (tileY < totalHeight) {\n             \n                tileX = 0;\n                 \n                while (tileX < totalWidth) {\n                 \n                    this._anim.draw(tileX, tileY);\n                    tileX += tileWidth;\n                     \n                }\n                 \n                tileY += tileHeight;\n                 \n            }\n         \n        },\n         \n        drawColorOnScreen: function() {\n            ig.system.clear(this.getColorCssValue());\n        },\n         \n        getColorCssValue: function(rgbaObject) {\n            var color = rgbaObject || this.options.color;\n            var a = ((typeof color.a != 'undefined') ? color.a : 1) * this._alpha;\n            if (a < 0) {\n                a = 0;\n            } else if (a > 1) {\n                a = 1;\n            }\n            return 'rgba(' + color.r + ',' + color.g + ',' + color.b + ',' + a + ')';\n        },\n         \n        finish: function() {\n         \n            if (this.isFinished) {\n                return;\n            }\n \n            if (this._alphaChange > 0) {\n                this._alpha = 1;\n            } else {\n                this._alpha = 0;\n            }\n             \n            if (this._anim) {\n                this._anim.alpha = this._alpha;\n            }\n             \n            this.isFinished = true;\n             \n            if (typeof this.options.callback == 'function') {\n                var delayTime = isNaN(this.options.delayAfter) ? 0 : this.options.delayAfter;\n                if (delayTime > 0) {\n                    this.timerDelayAfter = new ig.Timer(delayTime);\n                } else {\n                    this._callUserCallback();\n                }\n            }\n             \n        },\n         \n        _callUserCallback: function() {\n            this.options.callback.call(this.options.context || (ig.ScreenFader.globalGameIsContext ? ig.game : this));\n        },\n                 \n        _fadeAlphaValue: function() {\n         \n            this._alpha += (this._alphaChange * this.options.speed * ig.system.tick * ig.ScreenFader.globalSpeedFactor);\n             \n            if ((this._alphaChange > 0 && this._alpha >= 1) || (this._alphaChange < 0 && this._alpha <= 0) ) {\n                this.finish();\n            }\n             \n            if (this._anim) {\n                this._anim.alpha = this._alpha;\n            }\n                     \n        },\n \n        _setOptions: function(userOptions) {\n \n            this.options = ig.copy(this.defaultOptions);\n             \n            if (isNaN(this.options.screenWidth) || this.options.screenWidth <= 0) {\n                this.options.screenWidth = ig.system.width;\n            }\n             \n            if (isNaN(this.options.screenHeight) || this.options.screenHeight <= 0) {\n                this.options.screenHeight = ig.system.height;\n            }\n                         \n            if (userOptions) {\n                ig.merge(this.options, userOptions);\n            }\n             \n        },\n \n    });     \n     \n    ig.ScreenFader.globalSpeedFactor = 2 / 3;\n    ig.ScreenFader.globalGameIsContext = true;\n     \n});\n    "]],"start1":0,"start2":0,"length1":0,"length2":6484}]],"length":6484,"saved":false}
