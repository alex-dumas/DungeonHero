{"ts":1373383770816,"silentsave":true,"restoring":false,"patch":[[{"diffs":[[1,"<?php\nif( count($argv) < 3 ) {\n\techo \"Usage: bake.php <in...> <out>\\n\";\n\techo \"e.g. bake.php lib/impact/impact.js lib/game/game.js mygame-baked.js\\n\";\n\tdie;\n}\n\n$inFiles = array_slice( $argv, 1, -1 );\n$outFile = $argv[ count($argv)-1 ];\n\n$baker = new Baker( Baker::MINIFIED );\n$baker->bake( $inFiles, $outFile );\n\n\nclass Baker {\n\tconst PLAIN = 0;\n\tconst MINIFIED = 1;\n\tconst GZIPPED = 2;\n\t\n\tprotected $base = 'lib/';\n\tprotected $format = 0;\n\tprotected $loaded = array();\n\tprotected $currentInput = 'Command Line';\n\tprotected $fileCount = 0, $bytesIn = 0, $bytesOut = 0;\n\t\n\tpublic function __construct( $format = 0 ) {\n\t\t$this->format = $format;\n\t\tif( $this->format & self::MINIFIED ) {\n\t\t\trequire_once( 'jsmin.php' );\n\t\t}\n\t}\n\t\n\t\n\tpublic function bake( $inFiles, $outFile ) {\n\t\t$this->fileCount = 0;\n\t\t$this->bytesIn = 0;\n\t\t$out = \"/*! Built with IMPACT - impactjs.com */\\n\\n\";\n\t\t\n\t\tforeach( $inFiles as $f ) {\n\t\t\t$out .=\t$this->load( $f );\n\t\t}\n\t\t\n\t\t$bytesOut = strlen($out);\n\t\t$bytesOutZipped = 0;\n\t\t\n\t\techo \"writing $outFile\\n\";\n\t\t@file_put_contents( $outFile, $out ) or\n\t\t\tdie(\"ERROR: Couldn't write to $outFile\\n\");\n\t\t\n\t\tif( $this->format & self::GZIPPED ) {\n\t\t\t$gzFile = \"$outFile.gz\";\n\t\t\techo \"writing $gzFile\\n\";\n\t\t\t$fh = gzopen( $gzFile, 'w9' ) or\n\t\t\t\tdie(\"ERROR: Couldn't write to $gzFile\\n\");\n\t\t\t\t\n\t\t\tgzwrite( $fh, $out );\n\t\t\tgzclose( $fh );\n\t\t\t$bytesOutZipped = filesize( $gzFile );\n\t\t}\n\t\t\n\t\t\n\t\techo\n\t\t\t\"\\nbaked {$this->fileCount} files: \".\n\t\t\tround($this->bytesIn/1024,1).\"kb -> \".round($bytesOut/1024,1).\"kb\" .\n\t\t\t( $this->format & self::GZIPPED\n\t\t\t\t? \" (\".round($bytesOutZipped/1024,1).\"kb gzipped)\\n\"\n\t\t\t\t: \"\\n\"\n\t\t\t);\n\t}\n\t\n\t\n\tprotected function load( $path ) {\n\t\tif( isset($this->loaded[$path]) ) {\n\t\t\treturn '';\n\t\t}\n\t\t\n\t\tif( !file_exists($path) ) {\n\t\t\tdie(\"ERROR: Couldn't load $path required from {$this->currentInput}\\n\");\n\t\t}\n\t\t\n\t\techo \"loading $path \\n\";\n\t\t$this->loaded[$path] = true;\n\t\t$this->currentInput = $path;\n\t\t\n\t\t$code = file_get_contents( $path );\n\t\t$this->bytesIn += strlen($code);\n\t\t$this->fileCount++;\n\t\tif( $this->format & self::MINIFIED ) {\n\t\t\t$code = trim(JSMin::minify($code));\n\t\t}\n\t\t\n\t\t\n\t\t// Naively probe the file for 'ig.module().requires().defines()' code;\n\t\t// the 'requries()' part will be handled by the regexp callback\n\t\t$this->definesModule = false;\n\t\t$code = preg_replace_callback(\n\t\t\t'/ig\\s*\n\t\t\t\t\\.\\s*module\\s*\\((.*?)\\)\\s*\n\t\t\t\t(\\.\\s*requires\\s*\\((.*?)\\)\\s*)?\n\t\t\t\t\\.\\s*defines\\s*\\(\n\t\t\t/smx',\n\t\t\tarray($this,'loadCallback'),\n\t\t\t$code\n\t\t);\n\t\t\n\t\t// All files should define a module; maybe we just missed it? Print a\n\t\t// friendly reminder :)\n\t\tif( !$this->definesModule ) {\n\t\t\techo \"WARNING: file $path seems to define no module!\\n\";\n\t\t}\n\t\t\n\t\treturn $code;\n\t}\n\t\n\t\n\tprotected function loadCallback( $matches ) {\n\t\t$currentInput = $this->currentInput;\n\t\t$this->definesModule  = true;\n\t\t\n\t\t$moduleName = $matches[1];\n\t\t$requiredFiles = isset($matches[3]) ? $matches[3] : '';\n\t\t$requiredCode = '';\n\t\t\n\t\tif( $requiredFiles ) {\t\t\t\n\t\t\t// Explode the module names and map them to file names. Ignore the\n\t\t\t// dom.ready module if present\n\t\t\t$moduleFiles = array_diff(\n\t\t\t\texplode(\n\t\t\t\t\t',',\n\t\t\t\t\tpreg_replace(\n\t\t\t\t\t\t'/[\\s\\'\"]|\\/\\/.*|\\/\\*.*\\*\\//', // strip quotes and spaces\n\t\t\t\t\t\t'',\n\t\t\t\t\t\tstr_replace('.', '/', $requiredFiles ) // . to /\n\t\t\t\t\t)\n\t\t\t\t),\n\t\t\t\tarray('dom/ready')\n\t\t\t);\n\t\t\t\n\t\t\tforeach( $moduleFiles as $f ) {\n\t\t\t\t$requiredCode .= $this->load( $this->base . $f.'.js' );\n\t\t\t}\n\t\t}\n\t\t\n\t\treturn\n\t\t\t$requiredCode .\n\t\t\t\"\\n\\n// $currentInput\\n\" .\n\t\t\t'ig.baked=true;' .\n\t\t\t'ig.module('.$moduleName.')' .\n\t\t\t( $requiredFiles\n\t\t\t\t? '.requires('.$requiredFiles.')'\n\t\t\t\t: ''\n\t\t\t) .\n\t\t\t'.defines(';\n\t}\n}\n\n?>"]],"start1":0,"start2":0,"length1":0,"length2":3638}]],"length":3638}
